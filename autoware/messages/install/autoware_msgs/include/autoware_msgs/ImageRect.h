// Generated by gencpp from file autoware_msgs/ImageRect.msg
// DO NOT EDIT!


#ifndef AUTOWARE_MSGS_MESSAGE_IMAGERECT_H
#define AUTOWARE_MSGS_MESSAGE_IMAGERECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autoware_msgs
{
template <class ContainerAllocator>
struct ImageRect_
{
  typedef ImageRect_<ContainerAllocator> Type;

  ImageRect_()
    : x(0)
    , y(0)
    , height(0)
    , width(0)
    , score(0.0)  {
    }
  ImageRect_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , height(0)
    , width(0)
    , score(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _width_type;
  _width_type width;

   typedef float _score_type;
  _score_type score;





  typedef boost::shared_ptr< ::autoware_msgs::ImageRect_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_msgs::ImageRect_<ContainerAllocator> const> ConstPtr;

}; // struct ImageRect_

typedef ::autoware_msgs::ImageRect_<std::allocator<void> > ImageRect;

typedef boost::shared_ptr< ::autoware_msgs::ImageRect > ImageRectPtr;
typedef boost::shared_ptr< ::autoware_msgs::ImageRect const> ImageRectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_msgs::ImageRect_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_msgs::ImageRect_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_msgs::ImageRect_<ContainerAllocator1> & lhs, const ::autoware_msgs::ImageRect_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.height == rhs.height &&
    lhs.width == rhs.width &&
    lhs.score == rhs.score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_msgs::ImageRect_<ContainerAllocator1> & lhs, const ::autoware_msgs::ImageRect_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autoware_msgs::ImageRect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_msgs::ImageRect_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_msgs::ImageRect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_msgs::ImageRect_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_msgs::ImageRect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_msgs::ImageRect_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_msgs::ImageRect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb25029b34a07f966ba32a6ce98cb199";
  }

  static const char* value(const ::autoware_msgs::ImageRect_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb25029b34a07f96ULL;
  static const uint64_t static_value2 = 0x6ba32a6ce98cb199ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_msgs::ImageRect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_msgs/ImageRect";
  }

  static const char* value(const ::autoware_msgs::ImageRect_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_msgs::ImageRect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 x\n"
"int32 y\n"
"int32 height\n"
"int32 width\n"
"float32 score\n"
;
  }

  static const char* value(const ::autoware_msgs::ImageRect_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_msgs::ImageRect_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageRect_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_msgs::ImageRect_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_msgs::ImageRect_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_MSGS_MESSAGE_IMAGERECT_H
