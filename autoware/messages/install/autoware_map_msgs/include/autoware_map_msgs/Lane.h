// Generated by gencpp from file autoware_map_msgs/Lane.msg
// DO NOT EDIT!


#ifndef AUTOWARE_MAP_MSGS_MESSAGE_LANE_H
#define AUTOWARE_MAP_MSGS_MESSAGE_LANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autoware_map_msgs
{
template <class ContainerAllocator>
struct Lane_
{
  typedef Lane_<ContainerAllocator> Type;

  Lane_()
    : lane_id(0)
    , start_waypoint_id(0)
    , end_waypoint_id(0)
    , lane_number(0)
    , num_of_lanes(0)
    , speed_limit(0.0)
    , length(0.0)
    , width_limit(0.0)
    , height_limit(0.0)
    , weight_limit(0.0)  {
    }
  Lane_(const ContainerAllocator& _alloc)
    : lane_id(0)
    , start_waypoint_id(0)
    , end_waypoint_id(0)
    , lane_number(0)
    , num_of_lanes(0)
    , speed_limit(0.0)
    , length(0.0)
    , width_limit(0.0)
    , height_limit(0.0)
    , weight_limit(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _lane_id_type;
  _lane_id_type lane_id;

   typedef int32_t _start_waypoint_id_type;
  _start_waypoint_id_type start_waypoint_id;

   typedef int32_t _end_waypoint_id_type;
  _end_waypoint_id_type end_waypoint_id;

   typedef int32_t _lane_number_type;
  _lane_number_type lane_number;

   typedef int32_t _num_of_lanes_type;
  _num_of_lanes_type num_of_lanes;

   typedef double _speed_limit_type;
  _speed_limit_type speed_limit;

   typedef double _length_type;
  _length_type length;

   typedef double _width_limit_type;
  _width_limit_type width_limit;

   typedef double _height_limit_type;
  _height_limit_type height_limit;

   typedef double _weight_limit_type;
  _weight_limit_type weight_limit;





  typedef boost::shared_ptr< ::autoware_map_msgs::Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_map_msgs::Lane_<ContainerAllocator> const> ConstPtr;

}; // struct Lane_

typedef ::autoware_map_msgs::Lane_<std::allocator<void> > Lane;

typedef boost::shared_ptr< ::autoware_map_msgs::Lane > LanePtr;
typedef boost::shared_ptr< ::autoware_map_msgs::Lane const> LaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_map_msgs::Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_map_msgs::Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_map_msgs::Lane_<ContainerAllocator1> & lhs, const ::autoware_map_msgs::Lane_<ContainerAllocator2> & rhs)
{
  return lhs.lane_id == rhs.lane_id &&
    lhs.start_waypoint_id == rhs.start_waypoint_id &&
    lhs.end_waypoint_id == rhs.end_waypoint_id &&
    lhs.lane_number == rhs.lane_number &&
    lhs.num_of_lanes == rhs.num_of_lanes &&
    lhs.speed_limit == rhs.speed_limit &&
    lhs.length == rhs.length &&
    lhs.width_limit == rhs.width_limit &&
    lhs.height_limit == rhs.height_limit &&
    lhs.weight_limit == rhs.weight_limit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_map_msgs::Lane_<ContainerAllocator1> & lhs, const ::autoware_map_msgs::Lane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_map_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autoware_map_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_map_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_map_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_map_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_map_msgs::Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_map_msgs::Lane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_map_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bfc9dc43edcd85ad77faeee0a34e6b3f";
  }

  static const char* value(const ::autoware_map_msgs::Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbfc9dc43edcd85adULL;
  static const uint64_t static_value2 = 0x77faeee0a34e6b3fULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_map_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_map_msgs/Lane";
  }

  static const char* value(const ::autoware_map_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_map_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This represents a lane in a map.\n"
"\n"
"# Id of this Lane object. Must be unique among all lane objects.\n"
"int32 lane_id\n"
"\n"
"# Id of the first waypoint that belongs to this lane\n"
"int32 start_waypoint_id\n"
"\n"
"# Id of the last waypoint that belongs to this lane\n"
"int32 end_waypoint_id\n"
"\n"
"# This describes how many lanes there are in left side of this lane.\n"
"# E.g. If there are 2 lanes on the left side, then lane_number will be 2. \n"
"# If the road is single lane, then this will be 0. \n"
"# This will be always 0 in intersection. \n"
"int32 lane_number\n"
"\n"
"# Total number of lanes present in road. \n"
"int32 num_of_lanes\n"
"\n"
"# Speed limit of this lane in [km/h]\n"
"float64 speed_limit\n"
"\n"
"# Length of this lane in [m]\n"
"# i.e. accumulated length from start_waypoint to end_waypoint of this lane\n"
"float64 length\n"
"\n"
"# Maximum width of vehicle that can drive this lane in [m]\n"
"float64 width_limit\n"
"\n"
"# Maximum height of vehicle that can drive this lane in [m]. \n"
"float64 height_limit\n"
"\n"
"# Maximum weight of vehicle that can drive this lane in [kg]. \n"
"float64 weight_limit\n"
;
  }

  static const char* value(const ::autoware_map_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_map_msgs::Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_id);
      stream.next(m.start_waypoint_id);
      stream.next(m.end_waypoint_id);
      stream.next(m.lane_number);
      stream.next(m.num_of_lanes);
      stream.next(m.speed_limit);
      stream.next(m.length);
      stream.next(m.width_limit);
      stream.next(m.height_limit);
      stream.next(m.weight_limit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_map_msgs::Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_map_msgs::Lane_<ContainerAllocator>& v)
  {
    s << indent << "lane_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_id);
    s << indent << "start_waypoint_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.start_waypoint_id);
    s << indent << "end_waypoint_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.end_waypoint_id);
    s << indent << "lane_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_number);
    s << indent << "num_of_lanes: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_of_lanes);
    s << indent << "speed_limit: ";
    Printer<double>::stream(s, indent + "  ", v.speed_limit);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "width_limit: ";
    Printer<double>::stream(s, indent + "  ", v.width_limit);
    s << indent << "height_limit: ";
    Printer<double>::stream(s, indent + "  ", v.height_limit);
    s << indent << "weight_limit: ";
    Printer<double>::stream(s, indent + "  ", v.weight_limit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_MAP_MSGS_MESSAGE_LANE_H
