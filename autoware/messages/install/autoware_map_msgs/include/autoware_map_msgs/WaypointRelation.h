// Generated by gencpp from file autoware_map_msgs/WaypointRelation.msg
// DO NOT EDIT!


#ifndef AUTOWARE_MAP_MSGS_MESSAGE_WAYPOINTRELATION_H
#define AUTOWARE_MAP_MSGS_MESSAGE_WAYPOINTRELATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autoware_map_msgs
{
template <class ContainerAllocator>
struct WaypointRelation_
{
  typedef WaypointRelation_<ContainerAllocator> Type;

  WaypointRelation_()
    : waypoint_id(0)
    , next_waypoint_id(0)
    , yaw(0.0)
    , blinker(0)
    , distance(0.0)  {
    }
  WaypointRelation_(const ContainerAllocator& _alloc)
    : waypoint_id(0)
    , next_waypoint_id(0)
    , yaw(0.0)
    , blinker(0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _waypoint_id_type;
  _waypoint_id_type waypoint_id;

   typedef int32_t _next_waypoint_id_type;
  _next_waypoint_id_type next_waypoint_id;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef int32_t _blinker_type;
  _blinker_type blinker;

   typedef double _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointRelation_

typedef ::autoware_map_msgs::WaypointRelation_<std::allocator<void> > WaypointRelation;

typedef boost::shared_ptr< ::autoware_map_msgs::WaypointRelation > WaypointRelationPtr;
typedef boost::shared_ptr< ::autoware_map_msgs::WaypointRelation const> WaypointRelationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_map_msgs::WaypointRelation_<ContainerAllocator1> & lhs, const ::autoware_map_msgs::WaypointRelation_<ContainerAllocator2> & rhs)
{
  return lhs.waypoint_id == rhs.waypoint_id &&
    lhs.next_waypoint_id == rhs.next_waypoint_id &&
    lhs.yaw == rhs.yaw &&
    lhs.blinker == rhs.blinker &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_map_msgs::WaypointRelation_<ContainerAllocator1> & lhs, const ::autoware_map_msgs::WaypointRelation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_map_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c1af23db81a8c716746b8dc9e1511af";
  }

  static const char* value(const ::autoware_map_msgs::WaypointRelation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c1af23db81a8c71ULL;
  static const uint64_t static_value2 = 0x6746b8dc9e1511afULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_map_msgs/WaypointRelation";
  }

  static const char* value(const ::autoware_map_msgs::WaypointRelation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This represents the connection between a waypoint and a lane.\n"
"\n"
"# Id of refering Waypoint object\n"
"int32 waypoint_id\n"
"\n"
"# Id of Waypoint object that follows the refering waypoint\n"
"int32 next_waypoint_id\n"
"\n"
"# Direction from the refering waypoint to next waypoint in [rad].\n"
"# The angle is calculated from North in counter clockwise. \n"
"float64 yaw\n"
"\n"
"# Blinker that vehicle must light up when driving from waypoint to next_waypoint\n"
"int32 blinker\n"
"\n"
"# Distance between waypoint and next_waypoint\n"
"float64 distance\n"
;
  }

  static const char* value(const ::autoware_map_msgs::WaypointRelation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waypoint_id);
      stream.next(m.next_waypoint_id);
      stream.next(m.yaw);
      stream.next(m.blinker);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointRelation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_map_msgs::WaypointRelation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_map_msgs::WaypointRelation_<ContainerAllocator>& v)
  {
    s << indent << "waypoint_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.waypoint_id);
    s << indent << "next_waypoint_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_waypoint_id);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "blinker: ";
    Printer<int32_t>::stream(s, indent + "  ", v.blinker);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_MAP_MSGS_MESSAGE_WAYPOINTRELATION_H
