// Generated by gencpp from file autoware_map_msgs/Point.msg
// DO NOT EDIT!


#ifndef AUTOWARE_MAP_MSGS_MESSAGE_POINT_H
#define AUTOWARE_MAP_MSGS_MESSAGE_POINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autoware_map_msgs
{
template <class ContainerAllocator>
struct Point_
{
  typedef Point_<ContainerAllocator> Type;

  Point_()
    : point_id(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , mgrs(0)
    , epsg(0)
    , pcd()
    , lat(0.0)
    , lng(0.0)  {
    }
  Point_(const ContainerAllocator& _alloc)
    : point_id(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , mgrs(0)
    , epsg(0)
    , pcd(_alloc)
    , lat(0.0)
    , lng(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _point_id_type;
  _point_id_type point_id;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef int32_t _mgrs_type;
  _mgrs_type mgrs;

   typedef int32_t _epsg_type;
  _epsg_type epsg;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pcd_type;
  _pcd_type pcd;

   typedef double _lat_type;
  _lat_type lat;

   typedef double _lng_type;
  _lng_type lng;





  typedef boost::shared_ptr< ::autoware_map_msgs::Point_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_map_msgs::Point_<ContainerAllocator> const> ConstPtr;

}; // struct Point_

typedef ::autoware_map_msgs::Point_<std::allocator<void> > Point;

typedef boost::shared_ptr< ::autoware_map_msgs::Point > PointPtr;
typedef boost::shared_ptr< ::autoware_map_msgs::Point const> PointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_map_msgs::Point_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_map_msgs::Point_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_map_msgs::Point_<ContainerAllocator1> & lhs, const ::autoware_map_msgs::Point_<ContainerAllocator2> & rhs)
{
  return lhs.point_id == rhs.point_id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.mgrs == rhs.mgrs &&
    lhs.epsg == rhs.epsg &&
    lhs.pcd == rhs.pcd &&
    lhs.lat == rhs.lat &&
    lhs.lng == rhs.lng;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_map_msgs::Point_<ContainerAllocator1> & lhs, const ::autoware_map_msgs::Point_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_map_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autoware_map_msgs::Point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_map_msgs::Point_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_map_msgs::Point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_map_msgs::Point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_map_msgs::Point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_map_msgs::Point_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_map_msgs::Point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2eca464a653f0f18a5e4b6d3694d3d9c";
  }

  static const char* value(const ::autoware_map_msgs::Point_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2eca464a653f0f18ULL;
  static const uint64_t static_value2 = 0xa5e4b6d3694d3d9cULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_map_msgs::Point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_map_msgs/Point";
  }

  static const char* value(const ::autoware_map_msgs::Point_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_map_msgs::Point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This represents a point in a map.\n"
"\n"
"# Id of this Point object. Must be unique among all points in a map.\n"
"int32 point_id\n"
"\n"
"# Position of a point in MGRS coordinate [m]\n"
"# x = northing\n"
"# y = easting\n"
"# z = elevation\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"# Codes that describe coordinate of the x,y,z values. \n"
"int32 mgrs\n"
"int32 epsg\n"
"\n"
"# PCD file name which that is relevant. \n"
"string pcd\n"
"\n"
"# latitude and longitude in WGS84 coordinate in [deg]\n"
"float64 lat\n"
"float64 lng\n"
;
  }

  static const char* value(const ::autoware_map_msgs::Point_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_map_msgs::Point_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point_id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.mgrs);
      stream.next(m.epsg);
      stream.next(m.pcd);
      stream.next(m.lat);
      stream.next(m.lng);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Point_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_map_msgs::Point_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_map_msgs::Point_<ContainerAllocator>& v)
  {
    s << indent << "point_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.point_id);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "mgrs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mgrs);
    s << indent << "epsg: ";
    Printer<int32_t>::stream(s, indent + "  ", v.epsg);
    s << indent << "pcd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pcd);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lng: ";
    Printer<double>::stream(s, indent + "  ", v.lng);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_MAP_MSGS_MESSAGE_POINT_H
