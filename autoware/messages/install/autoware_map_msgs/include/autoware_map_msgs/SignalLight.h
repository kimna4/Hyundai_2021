// Generated by gencpp from file autoware_map_msgs/SignalLight.msg
// DO NOT EDIT!


#ifndef AUTOWARE_MAP_MSGS_MESSAGE_SIGNALLIGHT_H
#define AUTOWARE_MAP_MSGS_MESSAGE_SIGNALLIGHT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autoware_map_msgs
{
template <class ContainerAllocator>
struct SignalLight_
{
  typedef SignalLight_<ContainerAllocator> Type;

  SignalLight_()
    : signal_light_id(0)
    , signal_id(0)
    , point_id(0)
    , horizontal_angle(0.0)
    , vertical_angle(0.0)
    , color_type(0)
    , arrow_type(0)  {
    }
  SignalLight_(const ContainerAllocator& _alloc)
    : signal_light_id(0)
    , signal_id(0)
    , point_id(0)
    , horizontal_angle(0.0)
    , vertical_angle(0.0)
    , color_type(0)
    , arrow_type(0)  {
  (void)_alloc;
    }



   typedef int32_t _signal_light_id_type;
  _signal_light_id_type signal_light_id;

   typedef int32_t _signal_id_type;
  _signal_id_type signal_id;

   typedef int32_t _point_id_type;
  _point_id_type point_id;

   typedef double _horizontal_angle_type;
  _horizontal_angle_type horizontal_angle;

   typedef double _vertical_angle_type;
  _vertical_angle_type vertical_angle;

   typedef int32_t _color_type_type;
  _color_type_type color_type;

   typedef int32_t _arrow_type_type;
  _arrow_type_type arrow_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RED)
  #undef RED
#endif
#if defined(_WIN32) && defined(GREEN)
  #undef GREEN
#endif
#if defined(_WIN32) && defined(YELLOW)
  #undef YELLOW
#endif
#if defined(_WIN32) && defined(RED_FLASHING)
  #undef RED_FLASHING
#endif
#if defined(_WIN32) && defined(GREEN_FLASHING)
  #undef GREEN_FLASHING
#endif
#if defined(_WIN32) && defined(YELLOW_FLASHING)
  #undef YELLOW_FLASHING
#endif
#if defined(_WIN32) && defined(UNKOWN)
  #undef UNKOWN
#endif
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(UP)
  #undef UP
#endif
#if defined(_WIN32) && defined(UP_RIGHT)
  #undef UP_RIGHT
#endif
#if defined(_WIN32) && defined(RIGHT)
  #undef RIGHT
#endif
#if defined(_WIN32) && defined(DOWN_RIGHT)
  #undef DOWN_RIGHT
#endif
#if defined(_WIN32) && defined(DOWN)
  #undef DOWN
#endif
#if defined(_WIN32) && defined(DOWN_LEFT)
  #undef DOWN_LEFT
#endif
#if defined(_WIN32) && defined(LEFT)
  #undef LEFT
#endif
#if defined(_WIN32) && defined(UP_LEFT)
  #undef UP_LEFT
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif

  enum {
    RED = 1u,
    GREEN = 2u,
    YELLOW = 3u,
    RED_FLASHING = 4u,
    GREEN_FLASHING = 5u,
    YELLOW_FLASHING = 6u,
    UNKOWN = 7u,
    NONE = 0u,
    UP = 1u,
    UP_RIGHT = 2u,
    RIGHT = 3u,
    DOWN_RIGHT = 4u,
    DOWN = 5u,
    DOWN_LEFT = 6u,
    LEFT = 7u,
    UP_LEFT = 8u,
    UNKNOWN = 9u,
  };


  typedef boost::shared_ptr< ::autoware_map_msgs::SignalLight_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_map_msgs::SignalLight_<ContainerAllocator> const> ConstPtr;

}; // struct SignalLight_

typedef ::autoware_map_msgs::SignalLight_<std::allocator<void> > SignalLight;

typedef boost::shared_ptr< ::autoware_map_msgs::SignalLight > SignalLightPtr;
typedef boost::shared_ptr< ::autoware_map_msgs::SignalLight const> SignalLightConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_map_msgs::SignalLight_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_map_msgs::SignalLight_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_map_msgs::SignalLight_<ContainerAllocator1> & lhs, const ::autoware_map_msgs::SignalLight_<ContainerAllocator2> & rhs)
{
  return lhs.signal_light_id == rhs.signal_light_id &&
    lhs.signal_id == rhs.signal_id &&
    lhs.point_id == rhs.point_id &&
    lhs.horizontal_angle == rhs.horizontal_angle &&
    lhs.vertical_angle == rhs.vertical_angle &&
    lhs.color_type == rhs.color_type &&
    lhs.arrow_type == rhs.arrow_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_map_msgs::SignalLight_<ContainerAllocator1> & lhs, const ::autoware_map_msgs::SignalLight_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_map_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autoware_map_msgs::SignalLight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_map_msgs::SignalLight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_map_msgs::SignalLight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_map_msgs::SignalLight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_map_msgs::SignalLight_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_map_msgs::SignalLight_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_map_msgs::SignalLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a38faee2ab9b5106b86c9785ffaff92d";
  }

  static const char* value(const ::autoware_map_msgs::SignalLight_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa38faee2ab9b5106ULL;
  static const uint64_t static_value2 = 0xb86c9785ffaff92dULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_map_msgs::SignalLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_map_msgs/SignalLight";
  }

  static const char* value(const ::autoware_map_msgs::SignalLight_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_map_msgs::SignalLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This represents each lamps in signal light in a map.\n"
"\n"
"# COLOR_TYPES\n"
"uint8 RED = 1\n"
"uint8 GREEN = 2\n"
"uint8 YELLOW = 3\n"
"uint8 RED_FLASHING = 4\n"
"uint8 GREEN_FLASHING = 5\n"
"uint8 YELLOW_FLASHING = 6\n"
"uint8 UNKOWN = 7\n"
"\n"
"# ARROW_TYPES\n"
"uint8 NONE = 0\n"
"uint8 UP = 1\n"
"uint8 UP_RIGHT = 2\n"
"uint8 RIGHT = 3\n"
"uint8 DOWN_RIGHT = 4\n"
"uint8 DOWN = 5\n"
"uint8 DOWN_LEFT = 6\n"
"uint8 LEFT = 7\n"
"uint8 UP_LEFT = 8\n"
"uint8 UNKNOWN = 9\n"
"\n"
"# Id of this SignalLight object. Must be uniqe among all SignalLight objects. \n"
"int32 signal_light_id\n"
"\n"
"# Id of Signal object which this SignalLight object belongs to\n"
"int32 signal_id\n"
"\n"
"# Id of point that represents the position of this lamp. \n"
"int32 point_id\n"
"\n"
"# Horizontal direction which this SignalLight is facing in [deg].\n"
"# Angle is calculated from North in clockwise direction. \n"
"float64 horizontal_angle\n"
"\n"
"# Vertical direction which this SignalLight is facing in [deg].\n"
"# Angle is calculated from vertical rising direction. \n"
"float64 vertical_angle\n"
"\n"
"# Color of the lamp\n"
"# Must be one of COLOR_TYPES\n"
"int32 color_type\n"
"\n"
"# Direction of the arrow (if the lamp has direction)\n"
"# Must be one of ARROW_TYPES\n"
"int32 arrow_type\n"
;
  }

  static const char* value(const ::autoware_map_msgs::SignalLight_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_map_msgs::SignalLight_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.signal_light_id);
      stream.next(m.signal_id);
      stream.next(m.point_id);
      stream.next(m.horizontal_angle);
      stream.next(m.vertical_angle);
      stream.next(m.color_type);
      stream.next(m.arrow_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SignalLight_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_map_msgs::SignalLight_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_map_msgs::SignalLight_<ContainerAllocator>& v)
  {
    s << indent << "signal_light_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.signal_light_id);
    s << indent << "signal_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.signal_id);
    s << indent << "point_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.point_id);
    s << indent << "horizontal_angle: ";
    Printer<double>::stream(s, indent + "  ", v.horizontal_angle);
    s << indent << "vertical_angle: ";
    Printer<double>::stream(s, indent + "  ", v.vertical_angle);
    s << indent << "color_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.color_type);
    s << indent << "arrow_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.arrow_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_MAP_MSGS_MESSAGE_SIGNALLIGHT_H
