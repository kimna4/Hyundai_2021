// Generated by gencpp from file autoware_system_msgs/SystemStatus.msg
// DO NOT EDIT!


#ifndef AUTOWARE_SYSTEM_MSGS_MESSAGE_SYSTEMSTATUS_H
#define AUTOWARE_SYSTEM_MSGS_MESSAGE_SYSTEMSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <autoware_system_msgs/NodeStatus.h>
#include <autoware_system_msgs/HardwareStatus.h>
#include <rosgraph_msgs/TopicStatistics.h>

namespace autoware_system_msgs
{
template <class ContainerAllocator>
struct SystemStatus_
{
  typedef SystemStatus_<ContainerAllocator> Type;

  SystemStatus_()
    : header()
    , available_nodes()
    , detect_too_match_warning(false)
    , node_status()
    , hardware_status()
    , topic_statistics()  {
    }
  SystemStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , available_nodes(_alloc)
    , detect_too_match_warning(false)
    , node_status(_alloc)
    , hardware_status(_alloc)
    , topic_statistics(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _available_nodes_type;
  _available_nodes_type available_nodes;

   typedef uint8_t _detect_too_match_warning_type;
  _detect_too_match_warning_type detect_too_match_warning;

   typedef std::vector< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> >::other >  _node_status_type;
  _node_status_type node_status;

   typedef std::vector< ::autoware_system_msgs::HardwareStatus_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autoware_system_msgs::HardwareStatus_<ContainerAllocator> >::other >  _hardware_status_type;
  _hardware_status_type hardware_status;

   typedef std::vector< ::rosgraph_msgs::TopicStatistics_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rosgraph_msgs::TopicStatistics_<ContainerAllocator> >::other >  _topic_statistics_type;
  _topic_statistics_type topic_statistics;





  typedef boost::shared_ptr< ::autoware_system_msgs::SystemStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_system_msgs::SystemStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SystemStatus_

typedef ::autoware_system_msgs::SystemStatus_<std::allocator<void> > SystemStatus;

typedef boost::shared_ptr< ::autoware_system_msgs::SystemStatus > SystemStatusPtr;
typedef boost::shared_ptr< ::autoware_system_msgs::SystemStatus const> SystemStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_system_msgs::SystemStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_system_msgs::SystemStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_system_msgs::SystemStatus_<ContainerAllocator1> & lhs, const ::autoware_system_msgs::SystemStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.available_nodes == rhs.available_nodes &&
    lhs.detect_too_match_warning == rhs.detect_too_match_warning &&
    lhs.node_status == rhs.node_status &&
    lhs.hardware_status == rhs.hardware_status &&
    lhs.topic_statistics == rhs.topic_statistics;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_system_msgs::SystemStatus_<ContainerAllocator1> & lhs, const ::autoware_system_msgs::SystemStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_system_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autoware_system_msgs::SystemStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_system_msgs::SystemStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_system_msgs::SystemStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_system_msgs::SystemStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_system_msgs::SystemStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_system_msgs::SystemStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_system_msgs::SystemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7daf3e9d5c454c414ddc765307bd564d";
  }

  static const char* value(const ::autoware_system_msgs::SystemStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7daf3e9d5c454c41ULL;
  static const uint64_t static_value2 = 0x4ddc765307bd564dULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_system_msgs::SystemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_system_msgs/SystemStatus";
  }

  static const char* value(const ::autoware_system_msgs::SystemStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_system_msgs::SystemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string[] available_nodes\n"
"bool detect_too_match_warning\n"
"autoware_system_msgs/NodeStatus[] node_status\n"
"autoware_system_msgs/HardwareStatus[] hardware_status\n"
"rosgraph_msgs/TopicStatistics[] topic_statistics\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: autoware_system_msgs/NodeStatus\n"
"Header header\n"
"string node_name\n"
"bool node_activated\n"
"autoware_system_msgs/DiagnosticStatusArray[] status\n"
"================================================================================\n"
"MSG: autoware_system_msgs/DiagnosticStatusArray\n"
"autoware_system_msgs/DiagnosticStatus[] status\n"
"================================================================================\n"
"MSG: autoware_system_msgs/DiagnosticStatus\n"
"Header header\n"
"\n"
"string key\n"
"\n"
"string value\n"
"\n"
"string description\n"
"\n"
"uint8 UNDEFINED = 0\n"
"\n"
"uint8 type\n"
"uint8 OUT_OF_RANGE = 1\n"
"uint8 UNEXPECTED_RATE = 2\n"
"uint8 INVALID_VALUE = 3\n"
"uint8 INTERNAL = 4\n"
"uint8 FUNCTIONAL = 100\n"
"uint8 HARDWARE = 200\n"
"\n"
"uint8 level\n"
"uint8 OK = 1\n"
"uint8 WARN = 2\n"
"uint8 ERROR = 3\n"
"uint8 FATAL = 4\n"
"\n"
"================================================================================\n"
"MSG: autoware_system_msgs/HardwareStatus\n"
"std_msgs/Header header\n"
"string hardware_name\n"
"autoware_system_msgs/DiagnosticStatusArray[] status\n"
"================================================================================\n"
"MSG: rosgraph_msgs/TopicStatistics\n"
"# name of the topic\n"
"string topic\n"
"\n"
"# node id of the publisher\n"
"string node_pub\n"
"\n"
"# node id of the subscriber\n"
"string node_sub\n"
"\n"
"# the statistics apply to this time window\n"
"time window_start\n"
"time window_stop\n"
"\n"
"# number of messages delivered during the window\n"
"int32 delivered_msgs\n"
"# numbers of messages dropped during the window\n"
"int32 dropped_msgs\n"
"\n"
"# traffic during the window, in bytes\n"
"int32 traffic\n"
"\n"
"# mean/stddev/max period between two messages\n"
"duration period_mean\n"
"duration period_stddev\n"
"duration period_max\n"
"\n"
"# mean/stddev/max age of the message based on the\n"
"# timestamp in the message header. In case the\n"
"# message does not have a header, it will be 0.\n"
"duration stamp_age_mean\n"
"duration stamp_age_stddev\n"
"duration stamp_age_max\n"
;
  }

  static const char* value(const ::autoware_system_msgs::SystemStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_system_msgs::SystemStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.available_nodes);
      stream.next(m.detect_too_match_warning);
      stream.next(m.node_status);
      stream.next(m.hardware_status);
      stream.next(m.topic_statistics);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SystemStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_system_msgs::SystemStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_system_msgs::SystemStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "available_nodes[]" << std::endl;
    for (size_t i = 0; i < v.available_nodes.size(); ++i)
    {
      s << indent << "  available_nodes[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.available_nodes[i]);
    }
    s << indent << "detect_too_match_warning: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detect_too_match_warning);
    s << indent << "node_status[]" << std::endl;
    for (size_t i = 0; i < v.node_status.size(); ++i)
    {
      s << indent << "  node_status[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.node_status[i]);
    }
    s << indent << "hardware_status[]" << std::endl;
    for (size_t i = 0; i < v.hardware_status.size(); ++i)
    {
      s << indent << "  hardware_status[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::autoware_system_msgs::HardwareStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.hardware_status[i]);
    }
    s << indent << "topic_statistics[]" << std::endl;
    for (size_t i = 0; i < v.topic_statistics.size(); ++i)
    {
      s << indent << "  topic_statistics[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rosgraph_msgs::TopicStatistics_<ContainerAllocator> >::stream(s, indent + "    ", v.topic_statistics[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_SYSTEM_MSGS_MESSAGE_SYSTEMSTATUS_H
