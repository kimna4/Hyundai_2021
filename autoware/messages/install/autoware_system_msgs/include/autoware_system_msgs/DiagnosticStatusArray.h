// Generated by gencpp from file autoware_system_msgs/DiagnosticStatusArray.msg
// DO NOT EDIT!


#ifndef AUTOWARE_SYSTEM_MSGS_MESSAGE_DIAGNOSTICSTATUSARRAY_H
#define AUTOWARE_SYSTEM_MSGS_MESSAGE_DIAGNOSTICSTATUSARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <autoware_system_msgs/DiagnosticStatus.h>

namespace autoware_system_msgs
{
template <class ContainerAllocator>
struct DiagnosticStatusArray_
{
  typedef DiagnosticStatusArray_<ContainerAllocator> Type;

  DiagnosticStatusArray_()
    : status()  {
    }
  DiagnosticStatusArray_(const ContainerAllocator& _alloc)
    : status(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> >::other >  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> const> ConstPtr;

}; // struct DiagnosticStatusArray_

typedef ::autoware_system_msgs::DiagnosticStatusArray_<std::allocator<void> > DiagnosticStatusArray;

typedef boost::shared_ptr< ::autoware_system_msgs::DiagnosticStatusArray > DiagnosticStatusArrayPtr;
typedef boost::shared_ptr< ::autoware_system_msgs::DiagnosticStatusArray const> DiagnosticStatusArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator1> & lhs, const ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator1> & lhs, const ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_system_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3630b28b658945d3148aa0b60b9f7af0";
  }

  static const char* value(const ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3630b28b658945d3ULL;
  static const uint64_t static_value2 = 0x148aa0b60b9f7af0ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_system_msgs/DiagnosticStatusArray";
  }

  static const char* value(const ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_system_msgs/DiagnosticStatus[] status\n"
"================================================================================\n"
"MSG: autoware_system_msgs/DiagnosticStatus\n"
"Header header\n"
"\n"
"string key\n"
"\n"
"string value\n"
"\n"
"string description\n"
"\n"
"uint8 UNDEFINED = 0\n"
"\n"
"uint8 type\n"
"uint8 OUT_OF_RANGE = 1\n"
"uint8 UNEXPECTED_RATE = 2\n"
"uint8 INVALID_VALUE = 3\n"
"uint8 INTERNAL = 4\n"
"uint8 FUNCTIONAL = 100\n"
"uint8 HARDWARE = 200\n"
"\n"
"uint8 level\n"
"uint8 OK = 1\n"
"uint8 WARN = 2\n"
"uint8 ERROR = 3\n"
"uint8 FATAL = 4\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DiagnosticStatusArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator>& v)
  {
    s << indent << "status[]" << std::endl;
    for (size_t i = 0; i < v.status.size(); ++i)
    {
      s << indent << "  status[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.status[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_SYSTEM_MSGS_MESSAGE_DIAGNOSTICSTATUSARRAY_H
