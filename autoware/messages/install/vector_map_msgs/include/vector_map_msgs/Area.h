// Generated by gencpp from file vector_map_msgs/Area.msg
// DO NOT EDIT!


#ifndef VECTOR_MAP_MSGS_MESSAGE_AREA_H
#define VECTOR_MAP_MSGS_MESSAGE_AREA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vector_map_msgs
{
template <class ContainerAllocator>
struct Area_
{
  typedef Area_<ContainerAllocator> Type;

  Area_()
    : aid(0)
    , slid(0)
    , elid(0)  {
    }
  Area_(const ContainerAllocator& _alloc)
    : aid(0)
    , slid(0)
    , elid(0)  {
  (void)_alloc;
    }



   typedef int32_t _aid_type;
  _aid_type aid;

   typedef int32_t _slid_type;
  _slid_type slid;

   typedef int32_t _elid_type;
  _elid_type elid;





  typedef boost::shared_ptr< ::vector_map_msgs::Area_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_map_msgs::Area_<ContainerAllocator> const> ConstPtr;

}; // struct Area_

typedef ::vector_map_msgs::Area_<std::allocator<void> > Area;

typedef boost::shared_ptr< ::vector_map_msgs::Area > AreaPtr;
typedef boost::shared_ptr< ::vector_map_msgs::Area const> AreaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vector_map_msgs::Area_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vector_map_msgs::Area_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vector_map_msgs::Area_<ContainerAllocator1> & lhs, const ::vector_map_msgs::Area_<ContainerAllocator2> & rhs)
{
  return lhs.aid == rhs.aid &&
    lhs.slid == rhs.slid &&
    lhs.elid == rhs.elid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vector_map_msgs::Area_<ContainerAllocator1> & lhs, const ::vector_map_msgs::Area_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vector_map_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vector_map_msgs::Area_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vector_map_msgs::Area_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vector_map_msgs::Area_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vector_map_msgs::Area_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vector_map_msgs::Area_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vector_map_msgs::Area_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vector_map_msgs::Area_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54e3c8d0cac454f97de72b3d7d888691";
  }

  static const char* value(const ::vector_map_msgs::Area_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54e3c8d0cac454f9ULL;
  static const uint64_t static_value2 = 0x7de72b3d7d888691ULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_map_msgs::Area_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vector_map_msgs/Area";
  }

  static const char* value(const ::vector_map_msgs::Area_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vector_map_msgs::Area_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Ver 1.00\n"
"int32 aid\n"
"int32 slid\n"
"int32 elid\n"
;
  }

  static const char* value(const ::vector_map_msgs::Area_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vector_map_msgs::Area_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.aid);
      stream.next(m.slid);
      stream.next(m.elid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Area_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vector_map_msgs::Area_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vector_map_msgs::Area_<ContainerAllocator>& v)
  {
    s << indent << "aid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.aid);
    s << indent << "slid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.slid);
    s << indent << "elid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.elid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VECTOR_MAP_MSGS_MESSAGE_AREA_H
