// Generated by gencpp from file vector_map_msgs/CurveMirror.msg
// DO NOT EDIT!


#ifndef VECTOR_MAP_MSGS_MESSAGE_CURVEMIRROR_H
#define VECTOR_MAP_MSGS_MESSAGE_CURVEMIRROR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vector_map_msgs
{
template <class ContainerAllocator>
struct CurveMirror_
{
  typedef CurveMirror_<ContainerAllocator> Type;

  CurveMirror_()
    : id(0)
    , vid(0)
    , plid(0)
    , type(0)
    , linkid(0)  {
    }
  CurveMirror_(const ContainerAllocator& _alloc)
    : id(0)
    , vid(0)
    , plid(0)
    , type(0)
    , linkid(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _vid_type;
  _vid_type vid;

   typedef int32_t _plid_type;
  _plid_type plid;

   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _linkid_type;
  _linkid_type linkid;





  typedef boost::shared_ptr< ::vector_map_msgs::CurveMirror_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_map_msgs::CurveMirror_<ContainerAllocator> const> ConstPtr;

}; // struct CurveMirror_

typedef ::vector_map_msgs::CurveMirror_<std::allocator<void> > CurveMirror;

typedef boost::shared_ptr< ::vector_map_msgs::CurveMirror > CurveMirrorPtr;
typedef boost::shared_ptr< ::vector_map_msgs::CurveMirror const> CurveMirrorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vector_map_msgs::CurveMirror_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vector_map_msgs::CurveMirror_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vector_map_msgs::CurveMirror_<ContainerAllocator1> & lhs, const ::vector_map_msgs::CurveMirror_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.vid == rhs.vid &&
    lhs.plid == rhs.plid &&
    lhs.type == rhs.type &&
    lhs.linkid == rhs.linkid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vector_map_msgs::CurveMirror_<ContainerAllocator1> & lhs, const ::vector_map_msgs::CurveMirror_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vector_map_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vector_map_msgs::CurveMirror_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vector_map_msgs::CurveMirror_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vector_map_msgs::CurveMirror_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vector_map_msgs::CurveMirror_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vector_map_msgs::CurveMirror_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vector_map_msgs::CurveMirror_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vector_map_msgs::CurveMirror_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b77ca92f4f478f9746572f6ef94ad9e4";
  }

  static const char* value(const ::vector_map_msgs::CurveMirror_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb77ca92f4f478f97ULL;
  static const uint64_t static_value2 = 0x46572f6ef94ad9e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_map_msgs::CurveMirror_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vector_map_msgs/CurveMirror";
  }

  static const char* value(const ::vector_map_msgs::CurveMirror_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vector_map_msgs::CurveMirror_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Ver 1.10\n"
"int32 id\n"
"int32 vid\n"
"int32 plid\n"
"int32 type # differ from specification\n"
"int32 linkid\n"
;
  }

  static const char* value(const ::vector_map_msgs::CurveMirror_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vector_map_msgs::CurveMirror_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.vid);
      stream.next(m.plid);
      stream.next(m.type);
      stream.next(m.linkid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CurveMirror_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vector_map_msgs::CurveMirror_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vector_map_msgs::CurveMirror_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "vid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vid);
    s << indent << "plid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.plid);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "linkid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.linkid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VECTOR_MAP_MSGS_MESSAGE_CURVEMIRROR_H
