// Generated by gencpp from file vector_map_msgs/GuardRail.msg
// DO NOT EDIT!


#ifndef VECTOR_MAP_MSGS_MESSAGE_GUARDRAIL_H
#define VECTOR_MAP_MSGS_MESSAGE_GUARDRAIL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vector_map_msgs
{
template <class ContainerAllocator>
struct GuardRail_
{
  typedef GuardRail_<ContainerAllocator> Type;

  GuardRail_()
    : id(0)
    , aid(0)
    , type(0)
    , linkid(0)  {
    }
  GuardRail_(const ContainerAllocator& _alloc)
    : id(0)
    , aid(0)
    , type(0)
    , linkid(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _aid_type;
  _aid_type aid;

   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _linkid_type;
  _linkid_type linkid;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PLATE_BLADE)
  #undef PLATE_BLADE
#endif
#if defined(_WIN32) && defined(POLE)
  #undef POLE
#endif

  enum {
    PLATE_BLADE = 0u,
    POLE = 1u,
  };


  typedef boost::shared_ptr< ::vector_map_msgs::GuardRail_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_map_msgs::GuardRail_<ContainerAllocator> const> ConstPtr;

}; // struct GuardRail_

typedef ::vector_map_msgs::GuardRail_<std::allocator<void> > GuardRail;

typedef boost::shared_ptr< ::vector_map_msgs::GuardRail > GuardRailPtr;
typedef boost::shared_ptr< ::vector_map_msgs::GuardRail const> GuardRailConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vector_map_msgs::GuardRail_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vector_map_msgs::GuardRail_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vector_map_msgs::GuardRail_<ContainerAllocator1> & lhs, const ::vector_map_msgs::GuardRail_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.aid == rhs.aid &&
    lhs.type == rhs.type &&
    lhs.linkid == rhs.linkid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vector_map_msgs::GuardRail_<ContainerAllocator1> & lhs, const ::vector_map_msgs::GuardRail_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vector_map_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vector_map_msgs::GuardRail_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vector_map_msgs::GuardRail_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vector_map_msgs::GuardRail_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vector_map_msgs::GuardRail_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vector_map_msgs::GuardRail_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vector_map_msgs::GuardRail_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vector_map_msgs::GuardRail_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d0ff5b1e0af44869f9a932047e313c4";
  }

  static const char* value(const ::vector_map_msgs::GuardRail_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d0ff5b1e0af4486ULL;
  static const uint64_t static_value2 = 0x9f9a932047e313c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_map_msgs::GuardRail_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vector_map_msgs/GuardRail";
  }

  static const char* value(const ::vector_map_msgs::GuardRail_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vector_map_msgs::GuardRail_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# type\n"
"uint8 PLATE_BLADE=0\n"
"uint8 POLE=1\n"
"\n"
"# Ver 1.00\n"
"int32 id\n"
"int32 aid\n"
"int32 type\n"
"int32 linkid\n"
;
  }

  static const char* value(const ::vector_map_msgs::GuardRail_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vector_map_msgs::GuardRail_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.aid);
      stream.next(m.type);
      stream.next(m.linkid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GuardRail_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vector_map_msgs::GuardRail_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vector_map_msgs::GuardRail_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "aid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.aid);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "linkid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.linkid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VECTOR_MAP_MSGS_MESSAGE_GUARDRAIL_H
