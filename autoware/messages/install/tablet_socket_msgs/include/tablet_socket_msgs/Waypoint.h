// Generated by gencpp from file tablet_socket_msgs/Waypoint.msg
// DO NOT EDIT!


#ifndef TABLET_SOCKET_MSGS_MESSAGE_WAYPOINT_H
#define TABLET_SOCKET_MSGS_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tablet_socket_msgs
{
template <class ContainerAllocator>
struct Waypoint_
{
  typedef Waypoint_<ContainerAllocator> Type;

  Waypoint_()
    : lat(0.0)
    , lon(0.0)  {
    }
  Waypoint_(const ContainerAllocator& _alloc)
    : lat(0.0)
    , lon(0.0)  {
  (void)_alloc;
    }



   typedef double _lat_type;
  _lat_type lat;

   typedef double _lon_type;
  _lon_type lon;





  typedef boost::shared_ptr< ::tablet_socket_msgs::Waypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tablet_socket_msgs::Waypoint_<ContainerAllocator> const> ConstPtr;

}; // struct Waypoint_

typedef ::tablet_socket_msgs::Waypoint_<std::allocator<void> > Waypoint;

typedef boost::shared_ptr< ::tablet_socket_msgs::Waypoint > WaypointPtr;
typedef boost::shared_ptr< ::tablet_socket_msgs::Waypoint const> WaypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tablet_socket_msgs::Waypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tablet_socket_msgs::Waypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tablet_socket_msgs::Waypoint_<ContainerAllocator1> & lhs, const ::tablet_socket_msgs::Waypoint_<ContainerAllocator2> & rhs)
{
  return lhs.lat == rhs.lat &&
    lhs.lon == rhs.lon;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tablet_socket_msgs::Waypoint_<ContainerAllocator1> & lhs, const ::tablet_socket_msgs::Waypoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tablet_socket_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tablet_socket_msgs::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tablet_socket_msgs::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tablet_socket_msgs::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tablet_socket_msgs::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tablet_socket_msgs::Waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tablet_socket_msgs::Waypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tablet_socket_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deb12644498d4b5511a84dbd9af1e283";
  }

  static const char* value(const ::tablet_socket_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdeb12644498d4b55ULL;
  static const uint64_t static_value2 = 0x11a84dbd9af1e283ULL;
};

template<class ContainerAllocator>
struct DataType< ::tablet_socket_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tablet_socket_msgs/Waypoint";
  }

  static const char* value(const ::tablet_socket_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tablet_socket_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 lat\n"
"float64 lon\n"
;
  }

  static const char* value(const ::tablet_socket_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tablet_socket_msgs::Waypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lat);
      stream.next(m.lon);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Waypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tablet_socket_msgs::Waypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tablet_socket_msgs::Waypoint_<ContainerAllocator>& v)
  {
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TABLET_SOCKET_MSGS_MESSAGE_WAYPOINT_H
