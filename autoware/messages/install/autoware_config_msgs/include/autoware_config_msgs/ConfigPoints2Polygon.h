// Generated by gencpp from file autoware_config_msgs/ConfigPoints2Polygon.msg
// DO NOT EDIT!


#ifndef AUTOWARE_CONFIG_MSGS_MESSAGE_CONFIGPOINTS2POLYGON_H
#define AUTOWARE_CONFIG_MSGS_MESSAGE_CONFIGPOINTS2POLYGON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace autoware_config_msgs
{
template <class ContainerAllocator>
struct ConfigPoints2Polygon_
{
  typedef ConfigPoints2Polygon_<ContainerAllocator> Type;

  ConfigPoints2Polygon_()
    : header()
    , k_search(0)
    , search_radius(0.0)
    , mu(0.0)
    , maximum_nearest_neighbors(0)
    , maximum_surface_angle(0.0)
    , minimum_angle(0.0)
    , maximum_angle(0.0)
    , normal_consistency(false)  {
    }
  ConfigPoints2Polygon_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , k_search(0)
    , search_radius(0.0)
    , mu(0.0)
    , maximum_nearest_neighbors(0)
    , maximum_surface_angle(0.0)
    , minimum_angle(0.0)
    , maximum_angle(0.0)
    , normal_consistency(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _k_search_type;
  _k_search_type k_search;

   typedef float _search_radius_type;
  _search_radius_type search_radius;

   typedef float _mu_type;
  _mu_type mu;

   typedef int32_t _maximum_nearest_neighbors_type;
  _maximum_nearest_neighbors_type maximum_nearest_neighbors;

   typedef float _maximum_surface_angle_type;
  _maximum_surface_angle_type maximum_surface_angle;

   typedef float _minimum_angle_type;
  _minimum_angle_type minimum_angle;

   typedef float _maximum_angle_type;
  _maximum_angle_type maximum_angle;

   typedef uint8_t _normal_consistency_type;
  _normal_consistency_type normal_consistency;





  typedef boost::shared_ptr< ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> const> ConstPtr;

}; // struct ConfigPoints2Polygon_

typedef ::autoware_config_msgs::ConfigPoints2Polygon_<std::allocator<void> > ConfigPoints2Polygon;

typedef boost::shared_ptr< ::autoware_config_msgs::ConfigPoints2Polygon > ConfigPoints2PolygonPtr;
typedef boost::shared_ptr< ::autoware_config_msgs::ConfigPoints2Polygon const> ConfigPoints2PolygonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator1> & lhs, const ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.k_search == rhs.k_search &&
    lhs.search_radius == rhs.search_radius &&
    lhs.mu == rhs.mu &&
    lhs.maximum_nearest_neighbors == rhs.maximum_nearest_neighbors &&
    lhs.maximum_surface_angle == rhs.maximum_surface_angle &&
    lhs.minimum_angle == rhs.minimum_angle &&
    lhs.maximum_angle == rhs.maximum_angle &&
    lhs.normal_consistency == rhs.normal_consistency;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator1> & lhs, const ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_config_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b14a69dff1a04a736a3b125792a41bf";
  }

  static const char* value(const ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b14a69dff1a04a7ULL;
  static const uint64_t static_value2 = 0x36a3b125792a41bfULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_config_msgs/ConfigPoints2Polygon";
  }

  static const char* value(const ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32 k_search\n"
"float32 search_radius\n"
"float32 mu\n"
"int32 maximum_nearest_neighbors\n"
"float32 maximum_surface_angle\n"
"float32 minimum_angle\n"
"float32 maximum_angle\n"
"bool normal_consistency\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.k_search);
      stream.next(m.search_radius);
      stream.next(m.mu);
      stream.next(m.maximum_nearest_neighbors);
      stream.next(m.maximum_surface_angle);
      stream.next(m.minimum_angle);
      stream.next(m.maximum_angle);
      stream.next(m.normal_consistency);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConfigPoints2Polygon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_config_msgs::ConfigPoints2Polygon_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "k_search: ";
    Printer<int32_t>::stream(s, indent + "  ", v.k_search);
    s << indent << "search_radius: ";
    Printer<float>::stream(s, indent + "  ", v.search_radius);
    s << indent << "mu: ";
    Printer<float>::stream(s, indent + "  ", v.mu);
    s << indent << "maximum_nearest_neighbors: ";
    Printer<int32_t>::stream(s, indent + "  ", v.maximum_nearest_neighbors);
    s << indent << "maximum_surface_angle: ";
    Printer<float>::stream(s, indent + "  ", v.maximum_surface_angle);
    s << indent << "minimum_angle: ";
    Printer<float>::stream(s, indent + "  ", v.minimum_angle);
    s << indent << "maximum_angle: ";
    Printer<float>::stream(s, indent + "  ", v.maximum_angle);
    s << indent << "normal_consistency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.normal_consistency);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_CONFIG_MSGS_MESSAGE_CONFIGPOINTS2POLYGON_H
