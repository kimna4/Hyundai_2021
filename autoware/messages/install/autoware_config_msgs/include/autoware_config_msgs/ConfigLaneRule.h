// Generated by gencpp from file autoware_config_msgs/ConfigLaneRule.msg
// DO NOT EDIT!


#ifndef AUTOWARE_CONFIG_MSGS_MESSAGE_CONFIGLANERULE_H
#define AUTOWARE_CONFIG_MSGS_MESSAGE_CONFIGLANERULE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace autoware_config_msgs
{
template <class ContainerAllocator>
struct ConfigLaneRule_
{
  typedef ConfigLaneRule_<ContainerAllocator> Type;

  ConfigLaneRule_()
    : header()
    , acceleration(0.0)
    , stopline_search_radius(0.0)
    , number_of_zeros_ahead(0)
    , number_of_zeros_behind(0)
    , number_of_smoothing_count(0)  {
    }
  ConfigLaneRule_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , acceleration(0.0)
    , stopline_search_radius(0.0)
    , number_of_zeros_ahead(0)
    , number_of_zeros_behind(0)
    , number_of_smoothing_count(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _acceleration_type;
  _acceleration_type acceleration;

   typedef float _stopline_search_radius_type;
  _stopline_search_radius_type stopline_search_radius;

   typedef int32_t _number_of_zeros_ahead_type;
  _number_of_zeros_ahead_type number_of_zeros_ahead;

   typedef int32_t _number_of_zeros_behind_type;
  _number_of_zeros_behind_type number_of_zeros_behind;

   typedef int32_t _number_of_smoothing_count_type;
  _number_of_smoothing_count_type number_of_smoothing_count;





  typedef boost::shared_ptr< ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> const> ConstPtr;

}; // struct ConfigLaneRule_

typedef ::autoware_config_msgs::ConfigLaneRule_<std::allocator<void> > ConfigLaneRule;

typedef boost::shared_ptr< ::autoware_config_msgs::ConfigLaneRule > ConfigLaneRulePtr;
typedef boost::shared_ptr< ::autoware_config_msgs::ConfigLaneRule const> ConfigLaneRuleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator1> & lhs, const ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.acceleration == rhs.acceleration &&
    lhs.stopline_search_radius == rhs.stopline_search_radius &&
    lhs.number_of_zeros_ahead == rhs.number_of_zeros_ahead &&
    lhs.number_of_zeros_behind == rhs.number_of_zeros_behind &&
    lhs.number_of_smoothing_count == rhs.number_of_smoothing_count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator1> & lhs, const ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_config_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "186844f4cf4fe2d56c23516198932aa0";
  }

  static const char* value(const ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x186844f4cf4fe2d5ULL;
  static const uint64_t static_value2 = 0x6c23516198932aa0ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_config_msgs/ConfigLaneRule";
  }

  static const char* value(const ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 acceleration\n"
"float32 stopline_search_radius\n"
"int32 number_of_zeros_ahead\n"
"int32 number_of_zeros_behind\n"
"int32 number_of_smoothing_count\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.acceleration);
      stream.next(m.stopline_search_radius);
      stream.next(m.number_of_zeros_ahead);
      stream.next(m.number_of_zeros_behind);
      stream.next(m.number_of_smoothing_count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConfigLaneRule_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_config_msgs::ConfigLaneRule_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
    s << indent << "stopline_search_radius: ";
    Printer<float>::stream(s, indent + "  ", v.stopline_search_radius);
    s << indent << "number_of_zeros_ahead: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_of_zeros_ahead);
    s << indent << "number_of_zeros_behind: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_of_zeros_behind);
    s << indent << "number_of_smoothing_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_of_smoothing_count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_CONFIG_MSGS_MESSAGE_CONFIGLANERULE_H
