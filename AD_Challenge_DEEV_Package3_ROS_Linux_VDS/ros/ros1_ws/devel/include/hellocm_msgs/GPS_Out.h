// Generated by gencpp from file hellocm_msgs/GPS_Out.msg
// DO NOT EDIT!


#ifndef HELLOCM_MSGS_MESSAGE_GPS_OUT_H
#define HELLOCM_MSGS_MESSAGE_GPS_OUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace hellocm_msgs
{
template <class ContainerAllocator>
struct GPS_Out_
{
  typedef GPS_Out_<ContainerAllocator> Type;

  GPS_Out_()
    : header()
    , time()
    , cycleno(0)
    , synthdelay(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)  {
    }
  GPS_Out_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time()
    , cycleno(0)
    , synthdelay(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _time_type;
  _time_type time;

   typedef int64_t _cycleno_type;
  _cycleno_type cycleno;

   typedef double _synthdelay_type;
  _synthdelay_type synthdelay;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;





  typedef boost::shared_ptr< ::hellocm_msgs::GPS_Out_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hellocm_msgs::GPS_Out_<ContainerAllocator> const> ConstPtr;

}; // struct GPS_Out_

typedef ::hellocm_msgs::GPS_Out_<std::allocator<void> > GPS_Out;

typedef boost::shared_ptr< ::hellocm_msgs::GPS_Out > GPS_OutPtr;
typedef boost::shared_ptr< ::hellocm_msgs::GPS_Out const> GPS_OutConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hellocm_msgs::GPS_Out_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hellocm_msgs::GPS_Out_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hellocm_msgs::GPS_Out_<ContainerAllocator1> & lhs, const ::hellocm_msgs::GPS_Out_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.time == rhs.time &&
    lhs.cycleno == rhs.cycleno &&
    lhs.synthdelay == rhs.synthdelay &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hellocm_msgs::GPS_Out_<ContainerAllocator1> & lhs, const ::hellocm_msgs::GPS_Out_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hellocm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hellocm_msgs::GPS_Out_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hellocm_msgs::GPS_Out_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hellocm_msgs::GPS_Out_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hellocm_msgs::GPS_Out_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hellocm_msgs::GPS_Out_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hellocm_msgs::GPS_Out_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hellocm_msgs::GPS_Out_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2b5bbb24ea9e4146d094dd93061b838";
  }

  static const char* value(const ::hellocm_msgs::GPS_Out_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2b5bbb24ea9e414ULL;
  static const uint64_t static_value2 = 0x6d094dd93061b838ULL;
};

template<class ContainerAllocator>
struct DataType< ::hellocm_msgs::GPS_Out_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hellocm_msgs/GPS_Out";
  }

  static const char* value(const ::hellocm_msgs::GPS_Out_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hellocm_msgs::GPS_Out_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Message from CarMaker ROS Node to external ROS Node\n"
"#\n"
"\n"
"# General\n"
"Header  header                                 # General ROS Header (optional)\n"
"time    time                                   # ROS time when message was sent (optional)\n"
"int64   cycleno                                # Cycle number since simulation start (optional)\n"
"float64 synthdelay                             # Synthetic delay to check synchronization (optional)\n"
"\n"
"float64 latitude                               # Latitude [degrees]\n"
"float64 longitude                              # Longitude [degrees]\n"
"float64 altitude                               # Altitude [m]\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::hellocm_msgs::GPS_Out_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hellocm_msgs::GPS_Out_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.cycleno);
      stream.next(m.synthdelay);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPS_Out_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hellocm_msgs::GPS_Out_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hellocm_msgs::GPS_Out_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "cycleno: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cycleno);
    s << indent << "synthdelay: ";
    Printer<double>::stream(s, indent + "  ", v.synthdelay);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLOCM_MSGS_MESSAGE_GPS_OUT_H
